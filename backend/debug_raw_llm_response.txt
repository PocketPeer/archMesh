```
{
  "architecture_overview": {
    "name": "Cloud-Native E-commerce Platform",
    "style": "microservices|monolith",
    "description": "Comprehensive e-commerce platform built on cloud-native principles",
    "rationale": "To leverage scalability, flexibility, and reliability of cloud-native architecture",
    "quality_attributes": ["scalability", "maintainability", "security", "performance"]
  },
  "components": [
    {
      "id": "comp_1",
      "name": "Authentication Service",
      "type": "service",
      "description": "Handles user authentication and account management",
      "responsibilities": ["User registration", "Login and logout"],
      "technologies": ["Node.js", "Express", "JWT", "OAuth2"],
      "interfaces": [
        {
          "name": "Authentication API",
          "type": "REST",
          "description": "Handles user authentication requests",
          "endpoints": ["/register", "/login"]
        }
      ],
      "dependencies": ["comp_3"],
      "scalability": "Horizontal scaling with load balancers and auto-scaling",
      "security_considerations": ["Data encryption", "Secure password storage"],
      "performance_characteristics": {
        "expected_load": "1000 req/s",
        "response_time": "500ms",
        "resource_requirements": "1 CPU, 2GB RAM"
      },
      "data_model": {
        "entities": ["users", "roles"],
        "relationships": ["user-role"],
        "storage_requirements": "10MB initial, 100KB/month growth"
      }
    },
    {
      "id": "comp_2",
      "name": "Product Catalog Service",
      "type": "service",
      "description": "Handles product catalog management and retrieval",
      "responsibilities": ["Product listing", "Search and filtering"],
      "technologies": ["Node.js", "Express", "MongoDB"],
      "interfaces": [
        {
          "name": "Product API",
          "type": "REST",
          "description": "Handles product catalog requests",
          "endpoints": ["/products", "/search"]
        }
      ],
      "dependencies": ["comp_1"],
      "scalability": "Horizontal scaling with load balancers and auto-scaling",
      "security_considerations": ["Data encryption", "Secure data storage"],
      "performance_characteristics": {
        "expected_load": "500 req/s",
        "response_time": "1000ms",
        "resource_requirements": "2 CPUs, 4GB RAM"
      },
      "data_model": {
        "entities": ["products", "categories"],
        "relationships": ["product-category"],
        "storage_requirements": "50MB initial, 500KB/month growth"
      }
    },
    {
      "id": "comp_3",
      "name": "Database Service",
      "type": "database",
      "description": "Handles database operations and data storage",
      "responsibilities": ["Data retrieval", "Data insertion"],
      "technologies": ["PostgreSQL", "Redis"],
      "interfaces": [
        {
          "name": "Database API",
          "type": "REST",
          "description": "Handles database requests",
          "endpoints": ["/users", "/products"]
        }
      ],
      "dependencies": [],
      "scalability": "Horizontal scaling with load balancers and auto-scaling",
      "security_considerations": ["Data encryption", "Secure data storage"],
      "performance_characteristics": {
        "expected_load": "100 req/s",
        "response_time": "500ms",
        "resource_requirements": "1 CPU, 2GB RAM"
      },
      "data_model": {
        "entities": ["users", "products"],
        "relationships": [],
        "storage_requirements": "10MB initial, 100KB/month growth"
      }
    },
    {
      "id": "comp_4",
      "name": "Frontend Service",
      "type": "service",
      "description": "Handles frontend rendering and user interaction",
      "responsibilities": ["User interface", "User experience"],
      "technologies": ["React", "Next.js", "TypeScript"],
      "interfaces": [
        {
          "name": "API Gateway",
          "type": "REST",
          "description": "Handles API requests from frontend",
          "endpoints": ["/api/users", "/api/products"]
        }
      ],
      "dependencies": ["comp_2"],
      "scalability": "Horizontal scaling with load balancers and auto-scaling",
      "security_considerations": ["Data encryption", "Secure data storage"],
      "performance_characteristics": {
        "expected_load": "1000 req/s",
        "response_time": "500ms",
        "resource_requirements": "2 CPUs, 4GB RAM"
      },
      "data_model": {
        "entities": [],
        "relationships": [],
        "storage_requirements": "10MB initial, 100KB/month growth"
      }
    }
  ],
  "diagrams": {
    "c4_context": {
      "title": "System Context Diagram",
      "description": "High-level system context",
      "code": "PlantUML code for C4 Context diagram"
    },
    "c4_container": {
      "title": "Container Diagram", 
      "description": "System containers and relationships",
      "code": "PlantUML code for C4 Container diagram"
    },
    "sequence_diagrams": [
      {
        "title": "Key Use Case Flow",
        "description": "Sequence diagram for primary use case",
        "code": "PlantUML sequence diagram code"
      }
    ]
  },
  "technology_stack": {
    "frontend": ["React", "Next.js", "TypeScript"],
    "backend": ["Node.js", "Express", "JWT", "OAuth2"],
    "database": ["PostgreSQL", "Redis"],
    "infrastructure": ["Docker", "Kubernetes", "AWS"],
    "monitoring": ["Prometheus", "Grafana", "ELK Stack"],
    "security": ["OAuth2", "JWT", "HTTPS"]
  },
  "implementation_plan": {
    "phases": [
      {
        "id": "phase_1",
        "name": "Phase Name",
        "description": "Phase description",
        "duration": "4 weeks",
        "deliverables": ["deliverable1", "deliverable2"],
        "dependencies": ["other_phase_id"],
        "risks": ["risk1", "risk2"],
        "success_criteria": ["criteria1", "criteria2"]
      }
    ],
    "tasks": [
      {
        "id": "task_1",
        "title": "Task title",
        "description": "Task description",
        "phase_id": "phase_1",
        "effort": "5 days",
        "assignee": "role",
        "dependencies": ["other_task_id"],
        "acceptance_criteria": ["criteria1", "criteria2"]
      }
    ],
    "timeline": {
      "total_duration": "12 weeks",
      "critical_path": ["task1", "task2", "task3"],
      "milestones": [
        {
          "name": "Milestone Name",
          "date": "2024-03-01",
          "deliverables": ["deliverable1"]
        }
      ]
    }
  },
  "quality_analysis": {
    "scalability": {
      "current_capacity": "1000 users",
      "scaling_strategy": "Horizontal scaling with load balancers and auto-scaling",
      "bottlenecks": ["database", "external_apis"],
      "mitigation": ["database_sharding", "caching"]
    },
    "security": {
      "threats": ["threat1", "threat2"],
      "mitigations": ["mitigation1", "mitigation2"],
      "compliance": ["GDPR", "SOC2"],
      "authentication": "OAuth2 + JWT",
      "authorization": "RBAC"
    },
    "performance": {
      "targets": {
        "response_time": "200ms",
        "throughput": "1000 req/s",
        "availability": "99.9%"
      },
      "optimization_strategies": ["caching", "CDN", "database_indexing"]
    }
  },
  "tradeoffs": [
    {
      "aspect": "Scalability vs Complexity",
      "pros": ["High scalability", "Independent deployments"],
      "cons": ["Increased complexity", "Network latency"],
      "recommendation": "Accept complexity for scalability benefits"
    }
  ],
  "recommendations": [
    {
      "id": "rec_1",
      "title": "Recommendation title",
      "description": "Detailed recommendation",
      "priority": "high|medium|low",
      "impact": "high|medium|low",
      "effort": "high|medium|low",
      "rationale": "Why this recommendation",
      "implementation": "How to implement"
    }
  ],
  "risks": [
    {
      "id": "risk_1",
      "title": "Risk title",
      "description": "Risk description",
      "probability": "high|medium|low",
      "impact": "high|medium|low",
      "mitigation": "Risk mitigation strategy"
    }
  ]
}
```